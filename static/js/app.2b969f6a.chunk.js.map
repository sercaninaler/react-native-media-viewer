{"version":3,"sources":["assets/pixabay.png","assets/fonts/UbuntuMono-R.ttf","assets/favicon.png","src/constants.ts","src/helpers.ts","src/styles.ts","src/components.tsx","src/App.tsx","App.js","web-build/register-service-worker.js"],"names":["module","exports","pixabayApi","query","lang","PIXABAY_API_URL","TAGS","SETTINGS","language","resolution","suggestions","theme","storage","localStorage","setData","key","value","a","async","setItem","getData","getItem","getStyles","styles","app","paddingTop","paddingBottom","height","backgroundColor","overflow","button","padding","borderRadius","borderColor","borderWidth","margin","justifyContent","minHeight","buttonText","fontFamily","fontSize","alignSelf","marginTop","marginBottom","marginLeft","marginRight","searchForm","flexDirection","position","width","searchButtonView","searchButton","searchInput","paddingLeft","color","tags","flexWrap","maxWidth","paddingRight","message","loader","flex","alignItems","top","opacity","zIndex","footer","bottom","left","display","footerLink","pictureHolder","picture","pictureInfo","textHolder","text","Button","props","useContext","ThemeContext","TouchableHighlight","style","addStyles","underlayColor","onPress","View","element","Text","React","createContext","App","then","result","JSON","stringify","useState","pictures","setPictures","setQuery","settingsCounter","setSettingsCounter","setMessage","isLoading","setIsLoading","showLinks","setShowLinks","limit","setLimit","settings","setSettings","setTags","Dimensions","get","useEffect","parse","updateSettings","newSettings","insertTag","tag","indexOf","unshift","getPictures","keyword","trim","Array","isArray","length","Math","round","Date","getTime","axios","response","data","hits","newPictures","forEach","item","push","image","webformatURL","imageBig","largeImageURL","isDeleted","setTimeout","lastTap","handleDoubleTap","index","now","showInfo","handleToggleInfo","getTagImage","require","filteredPictures","slice","recommendedTags","split","Provider","TextInput","onChangeText","toLowerCase","onSubmitEditing","placeholder","selectTextOnFocus","right","border","map","source","uri","onError","resetTagImage","ActivityIndicator","size","ScrollView","TouchableWithoutFeedback","deletePicture","Linking","openURL","borderLeftWidth","Platform","OS","window","oncontextmenu","event","preventDefault","stopPropagation","AppContainer","Font","navigator","addEventListener","serviceWorker","register","scope","info","catch","error","console"],"mappings":"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","file":"static/js/app.2b969f6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pixabay.0ec9e151.png\";","module.exports = __webpack_public_path__ + \"./fonts/UbuntuMono-R.ttf\";","module.exports = __webpack_public_path__ + \"static/media/favicon.cadf7e0b.png\";","import {\n  PIXABAY_API_URL,\n  PIXABAY_API_KEY,\n  FREESOUND_API_URL,\n  FREESOUND_API_KEY,\n} from '../config'\n\nexport const pixabayApi = (query: string, lang: string): string => `${PIXABAY_API_URL}?key=${PIXABAY_API_KEY}\n&q=${query}&lang=${lang}&image_type=photo&safesearch=true&orientation=horizontal&per_page=50`\nexport const freesoundApi = (query: string): string => `${FREESOUND_API_URL}?query=${query}&token=${FREESOUND_API_KEY}\n&normalized=true&fields=previews,description&sort=downloads_desc&filter=duration:[1 TO 5]`\n\nexport const TAGS = []\nexport const SETTINGS = {\n  language: 'en',\n  resolution: 640,\n  suggestions: false,\n  theme: 'light',\n}","import { Platform } from 'react-native'\nimport { AsyncStorage } from 'react-native';\n\nconst storage = localStorage\n//const storage = Platform.OS === 'web' ? localStorage : AsyncStorage\n\nimport { TAGS, SETTINGS } from './constants'\n\nexport const setData = async (key: string, value: string): Promise<void> => {\n  try {\n    await storage.setItem(key, value)\n  } catch (e) {\n    // throw error\n  }\n}\n\nexport const getData = async (key: string): Promise<string | null | undefined> => {\n  try {\n    return await storage.getItem(key)\n  } catch(e) {\n    // throw error\n  }\n}\n\nexport const initLocalStorage = (): void => {\n  getData('pictures').then(result => {\n    if (result === null) {\n      setData('pictures', JSON.stringify({})).then()\n    }\n  })\n\n  getData('tags').then(result => {\n    if (result === null) {\n      setData('tags', JSON.stringify(TAGS)).then()\n    }\n  })\n\n  getData('settings').then(result => {\n    if (result === null) {\n      setData('settings', JSON.stringify(SETTINGS)).then()\n    }\n  })\n}\n","import {ViewStyle, ImageStyle, TextStyle} from 'react-native'\n\nexport const getStyles = (theme: string) => {\n  let styles = {\n    app: {\n      paddingTop: 30,\n      paddingBottom: 30,\n      height: '100%',\n      backgroundColor: '#FFF',\n      overflow: 'hidden',\n    } as ViewStyle,\n    button: {\n      backgroundColor: '#EEE',\n      padding: 2,\n      borderRadius: 5,\n      borderColor: '#DDD',\n      borderWidth: 1,\n      margin: 3,\n      justifyContent: 'center',\n      minHeight: 32,\n    } as ViewStyle,\n    ':hover': {\n      backgroundColor: '#000',\n    } as ViewStyle,\n    buttonText: {\n      fontFamily: 'Ubuntu Mono',\n      fontSize: 14,\n      alignSelf: 'center',\n      marginTop: 2,\n      marginBottom: 2,\n      marginLeft: 4,\n      marginRight: 4,\n    } as TextStyle,\n    searchForm: {\n      justifyContent: 'center',\n      flexDirection: 'row',\n      position: 'relative',\n      width: 260,\n      alignSelf: 'center',\n    } as ViewStyle,\n    searchButtonView: {\n      height: 40,\n      marginLeft: 12,\n      marginTop: 3,\n    },\n    searchButton: {\n      height: 48,\n      padding: 4,\n      fontSize: 18,\n      borderRadius: 7,\n    },\n    searchInput: {\n      fontSize: 18,\n      padding: 8,\n      paddingLeft: 10,\n      backgroundColor: '#f8f8f8',\n      borderColor: '#ddd',\n      borderWidth: 1,\n      borderRadius: 5,\n      width: 300,\n      height: 36,\n      fontFamily: 'Ubuntu Mono',\n      color: '#000',\n      //outline: 'none',\n    } as TextStyle,\n    tags: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      marginTop: 15,\n      marginBottom: 40,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      maxWidth: 800,\n      paddingLeft: 5,\n      paddingRight: 5,\n    } as ViewStyle,\n    message: {\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      marginTop: 25,\n      color: 'red',\n      fontSize: 16,\n      alignSelf: 'center',\n    } as ViewStyle,\n    loader: {\n      flex: 1,\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      alignItems: 'center',\n      position: 'absolute',\n      top: 0,\n      width: '100%',\n      backgroundColor: '#FFF',\n      height: '100%',\n      opacity: 0.6,\n      zIndex: 1,\n      paddingBottom: 100,\n    } as ViewStyle,\n    footer: {\n      backgroundColor: '#ececec',\n      position: 'absolute',\n      width: '100%',\n      bottom: 0,\n      left: 0,\n      display: 'flex',\n      justifyContent: 'center',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n    } as ViewStyle,\n    footerLink: {\n      borderWidth: 0,\n      borderColor: '#CCC',\n      padding: 5,\n      paddingLeft: 10,\n      paddingRight: 10,\n      borderRadius: 0,\n      margin: 0,\n    } as ViewStyle,\n    pictureHolder: {\n      flexDirection: 'column',\n      position: 'relative',\n      maxWidth: 1280,\n      alignSelf: 'center',\n    } as ViewStyle,\n    picture: {\n      marginTop: '3%',\n      marginBottom: '3%',\n    } as ImageStyle,\n    pictureInfo: {\n      position: 'absolute',\n      bottom: '7%',\n      flexDirection: 'row',\n      alignSelf: 'center',\n    } as ViewStyle,\n    textHolder: {\n      paddingLeft: 10,\n      paddingRight: 10,\n      marginTop: '14%',\n      maxWidth: 320,\n      alignSelf: 'center'\n    } as TextStyle,\n    text: {\n      color: '#666',\n      fontSize: 14,\n      fontFamily: 'Ubuntu Mono',\n    } as TextStyle,\n  }\n\n  if (theme === 'dark') {\n    styles = {\n      ...styles,\n      app: {\n        ...styles.app,\n        backgroundColor: '#000'\n      },\n      loader: {\n        ...styles.loader,\n        backgroundColor: '#000',\n      },\n      searchInput: {\n        ...styles.searchInput,\n        backgroundColor: '#333',\n        borderColor: '#525252',\n        color: '#DDD',\n      },\n      button: {\n        ...styles.button,\n        backgroundColor: '#333',\n        borderColor: '#525252',\n      },\n      buttonText: {\n        ...styles.buttonText,\n        color: '#aaaaaa',\n      },\n      footer: {\n        ...styles.footer,\n        backgroundColor: '#333',\n      },\n      footerLink: {\n        ...styles.footerLink,\n        borderColor: '#5a5a5a',\n      }\n    }\n  }\n\n  return styles\n}\n","import {Text, TouchableHighlight, View} from 'react-native'\nimport React, { FC, useContext } from 'react'\nimport { getStyles } from './styles'\nimport { ThemeContext } from './App'\nimport { ButtonType } from './types'\n\nexport const Button: FC<ButtonType> = (props: ButtonType) => {\n  const theme = useContext(ThemeContext)\n  const styles = getStyles(theme)\n\n  return (\n    <TouchableHighlight\n      style={{...styles.button, ...props.addStyles}}\n      underlayColor={theme === 'dark' ? '#555' : '#ccc'}\n      onPress={props.onPress}\n    >\n      <View>\n        {props.element}\n        <Text style={styles.buttonText}>{props.text}</Text>\n      </View>\n    </TouchableHighlight>\n  )\n}","import React, { FC, useState, useEffect } from 'react'\nimport {\n  View,\n  Text,\n  ScrollView,\n  TextInput,\n  TouchableWithoutFeedback,\n  ActivityIndicator,\n  Linking,\n  Dimensions,\n} from 'react-native'\nimport axios from 'axios'\nimport { pixabayApi, SETTINGS } from './constants'\nimport { initLocalStorage, getData, setData } from './helpers'\nimport { Button } from './components'\nimport { ApiResultsType, PictureType, SettingsType } from './types'\nimport Image from 'react-native-scalable-image'\n\nimport { getStyles } from './styles'\n\nexport const ThemeContext = React.createContext('light');\n\nconst App: FC = () => {\n  initLocalStorage()\n\n  const [pictures, setPictures] = useState<PictureType[]>([])\n  /* const [sounds, setSounds] = useState([]) */\n  const [query, setQuery] = useState<string>('')\n  const [settingsCounter, setSettingsCounter] = useState<number>(0)\n  const [message, setMessage] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [showLinks, setShowLinks] = useState<boolean>(false)\n  const [limit, setLimit] = useState<number>(10)\n  const [settings, setSettings] = useState<SettingsType>(SETTINGS)\n  const [tags, setTags] = useState<string[]>([])\n\n  const width = Dimensions.get('window').width\n  const { theme, language, suggestions, resolution } = settings\n  const styles = getStyles(theme)\n\n  useEffect( () => {\n    getData('settings').then((settings) => {\n      if (settings) {\n        setSettings(JSON.parse(settings))\n      }\n    })\n    getData('tags').then((tags) => {\n      if (tags) {\n        setTags(JSON.parse(tags))\n      }\n    })\n    getData('pictures').then((pictures) => {\n      if (pictures) {\n        setPictures(JSON.parse(pictures))\n      }\n    })\n\n    /*\n    Dimensions.addEventListener(\"change\", (e) => {\n      console.log(e.window);\n    });\n    */\n  }, [])\n\n  const updateSettings = (key: string, value: string | boolean | number): void => {\n    const newSettings = {\n      ...settings,\n      [key]: value,\n    }\n    setSettings(newSettings)\n    setData('settings', JSON.stringify(newSettings))\n  }\n\n  const insertTag = (tag: string): void => {\n    if (tag !== '' && tags.indexOf(tag) === -1) {\n      tags.unshift(tag)\n      setTags(tags)\n      setData('tags', JSON.stringify(tags))\n    }\n  }\n\n  const getPictures = async (tag: string): Promise<void> => {\n    const keyword = tag.trim()\n    setMessage(null)\n    setLimit(10)\n    setIsLoading(true)\n    setShowLinks(false)\n    updateSettings('suggestions', false)\n\n    if ((!Array.isArray(pictures[keyword]) ||\n        !pictures[keyword].length) ||\n        Math.round(new Date().getTime() / 1000) - pictures[`${keyword}_lastUpdate`] > 12 * 60 * 60\n    ) {\n      const response = await axios.get(pixabayApi(keyword, language))\n      const data = response.data.hits\n\n      if (data.length) {\n        insertTag(keyword)\n\n        const newPictures: PictureType[] = []\n\n        data.forEach((item: ApiResultsType) => {\n          newPictures.push({\n            image: item.webformatURL,\n            imageBig: item.largeImageURL,\n            tags: item.tags,\n            isDeleted: false,\n          })\n        })\n\n        pictures[keyword] = newPictures\n        pictures[`${keyword}_lastUpdate`] = Math.round(new Date().getTime() / 1000)\n        setData('pictures', JSON.stringify(pictures))\n        setPictures({...pictures})\n      } else {\n        setTimeout(() => {\n          setMessage('Couldn\\'t find any results ')\n        }, 500)\n      }\n    } else {\n      if (tags.indexOf(keyword) === -1) {\n        insertTag(keyword)\n      }\n    }\n\n    setTimeout(() => {\n      setIsLoading(false)\n    }, 200)\n\n    setTimeout(() => {\n      setShowLinks(true)\n    }, 600)\n  }\n\n  /* const getSounds = async (query) => {\n    const response = await axios.get(freesoundApi(query))\n    const sounds = response.data.results\n    // console.log(sounds)\n    setSounds(sounds)\n    playAudio(sounds[0].previews['preview-lq-mp3'])\n  } */\n\n  /* const playAudio = (fileName) => {\n    if (sound) {\n      sound.pause()\n    }\n    sound = new Audio(fileName)\n    sound.play()\n  } */\n\n  let lastTap: number | null = null;\n\n  const handleToggleInfo = (index: number): void => {\n    pictures[query][index].showInfo = !pictures[query][index].showInfo\n    setPictures({...pictures})\n  }\n\n  const handleDoubleTap = (index: number): void => {\n    const now = Date.now();\n    if (lastTap && (now - lastTap) < 400) {\n      handleToggleInfo(index);\n    } else {\n      lastTap = now;\n    }\n  }\n\n  const deletePicture = (index: number): void => {\n    pictures[query][index].isDeleted = true\n    pictures[`${query}_lastUpdate`] = Math.round(new Date().getTime() / 1000)\n    setData('pictures', JSON.stringify(pictures))\n    setPictures({...pictures})\n  }\n\n  const onSubmit = (): void => {\n    getPictures(query)\n  }\n\n  /* const onChange = (event: React.SyntheticEvent): void => {\n    setQuery(event.target.value.toLowerCase())\n  }*/\n\n  const onChangeText = (text: string): void => {\n    setQuery(text.toLowerCase())\n  }\n\n  const showSettings = (): void => {\n    setSettingsCounter(settingsCounter + 1)\n  }\n\n  const renderPictureTags = (text: string): object => {\n    const pictureTags = text.split(',')\n\n    return pictureTags.map((tag) => (\n      <Button\n        onPress={(): void => {\n          setQuery(tag.trim())\n          getPictures(tag.trim())\n        }}\n        text={tag.trim()}\n        key={tag.trim()}\n      />\n    ))\n  }\n\n  const getTagImage = (tag: string): string => {\n    return pictures[tag] ? pictures[tag][0].image : require('../assets/favicon.png')\n  }\n\n  const resetTagImage = (tag: string): void => {\n    pictures[tag][0].image = require('../assets/favicon.png')\n    setPictures({...pictures})\n  }\n\n  const filteredPictures = pictures[query] ? pictures[query].slice(0, limit) : []\n\n  const recommendedTags: string[] = []\n\n  filteredPictures.forEach((picture: PictureType) => {\n    if (picture.tags) {\n      const tags = picture.tags.split(',')\n      tags.forEach((tag) => {\n        if (recommendedTags.indexOf(tag.trim()) === -1) {\n          recommendedTags.push(tag.trim())\n        }\n      })\n    }\n  })\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      <View style={styles.app}>\n        <View style={styles.searchForm}>\n          <TextInput\n            style={styles.searchInput}\n            value={query}\n            onChangeText={(text: string): void => onChangeText(text)}\n            onSubmitEditing={onSubmit}\n            placeholder=\"cats, planets, fruits,...\"\n            selectTextOnFocus\n          />\n          {query ? (\n            <View\n              style={[{position: 'absolute', right: 3}]}\n            >\n              <Button\n                text=\"X\"\n                addStyles={{border: 0, backgroundColor: 'transparent', margin: 2}}\n                onPress={(): void => {\n                  setQuery('')\n                }}\n              />\n            </View>\n          ) : null}\n        </View>\n        <View style={styles.tags}>\n          {tags.map((tag) => (\n            <View key={tag} style={[{alignItems: 'center'}]}>\n              <Button\n                text={tag}\n                onPress={(): void => {\n                  setQuery(tag)\n                  getPictures(tag)\n                }}\n                element={\n                  <Image\n                    style={[{borderRadius: 5, alignSelf: 'center'}]}\n                    source={{uri: getTagImage(tag)}}\n                    height={60}\n                    width={106}\n                    onPress={(): void => {\n                      setQuery(tag)\n                      getPictures(tag)\n                    }}\n                    onError={() => resetTagImage(tag)}\n                  />\n                }\n              />\n            </View>\n          ))}\n        </View>\n\n        {message && <Text style={styles.message}>{message}</Text>}\n\n        {isLoading && (\n          <View style={styles.loader}>\n            <ActivityIndicator size=\"large\" color={theme === 'light' ? '#0000ff' : '#FFFFFF'} />\n          </View>\n        )}\n\n        {!isLoading && filteredPictures.length !== 0 && (\n        <ScrollView style={styles.pictureHolder}>\n          {filteredPictures.map((picture: PictureType, index: number) => (\n            !picture.isDeleted && <TouchableWithoutFeedback\n              key={picture.image}\n              //onLongPress={(): void => handleToggleInfo(index)}\n              onPress={(): void => handleDoubleTap(index)}\n            >\n              <View style={styles.pictureHolder}>\n                <Image\n                  style={styles.picture}\n                  source={{uri: resolution === 640 ? picture.image : picture.imageBig}}\n                  width={width > resolution ? resolution : width}\n                />\n\n                  <View style={styles.pictureInfo}>\n                    <Button\n                      onPress={(): void => deletePicture(index)}\n                      text=\"x\"\n                      addStyles={{marginLeft: 2, marginRight: 2}}\n                    />\n\n                    {renderPictureTags(picture.tags)}\n                  </View>\n              </View>\n            </TouchableWithoutFeedback>\n          ))}\n\n          {showLinks && <View style={[{marginBottom: 20, width: 120, alignSelf: 'center'}]}>\n            <Button\n              onPress={(): void => setLimit(limit + 10) }\n              text=\"more pictures\"\n            />\n            <Button\n              addStyles={{marginTop: 20}}\n              onPress={(): void => updateSettings('suggestions', !suggestions) }\n              text=\"more tags\"\n            />\n          </View>}\n\n          {suggestions && <View style={styles.tags}>\n            {recommendedTags.map((tag) => (\n              <Button\n                key={tag}\n                text={tag}\n                onPress={(): void => {\n                  setQuery(tag)\n                  getPictures(tag)\n                }}\n              />\n            ))}\n          </View>}\n        </ScrollView>\n        )}\n\n        {!query && <View style={styles.textHolder}>\n          <View><Text style={[styles.text, {fontSize: 24}]}>mediaViewer</Text></View>\n          <View><Text style={styles.text}>- made with react native & typescript. works on web, android and ios</Text></View>\n          <View><Text style={styles.text}>- you can change theme, resolution and language in footer</Text></View>\n          <View><Text style={[styles.text, {marginTop: 14}]}>- sercan ;)</Text></View>\n          <View style={{width: 70}}>\n            <Image\n              style={{marginTop: 12}}\n              source={{uri: require('../assets/favicon.png')}}\n              width={70}\n            />\n            <Image\n              style={{marginTop: 12, marginBottom: 12, marginLeft: 3}}\n              source={{uri: require('../assets/pixabay.png')}}\n              width={60}\n              onPress={(): Promise<void> => Linking.openURL('http://pixabay.com')}\n            />\n          </View>\n        </View>}\n\n        {settingsCounter > 4 && <View style={[styles.footer, { bottom: 46 }]}>\n          <Button\n            onPress={(): void => setSettingsCounter(0)}\n            text=\"close\"\n            addStyles={styles.footerLink}\n          />\n\n          <Button\n            onPress={(): void => {\n              setData('tags', JSON.stringify([]))\n              setTags([])\n              setQuery('')\n            }}\n            text=\"clear tags\"\n            addStyles={{...styles.footerLink, borderLeftWidth: 1}}\n          />\n\n          <Button\n            onPress={(): void => {\n              setPictures([])\n              setData('pictures', JSON.stringify({}))\n            }}\n            text=\"clear cache\"\n            addStyles={{...styles.footerLink, borderLeftWidth: 1}}\n          />\n        </View>}\n\n        <View style={styles.footer}>\n          <Button\n            onPress={showSettings}\n            text=\"mediaViewer\"\n            addStyles={styles.footerLink}\n          />\n          <Button\n            onPress={(): void => updateSettings('language', language === 'en' ? 'tr' : 'en')}\n            text={language === 'en' ? 'english' : 'turkish'}\n            addStyles={{...styles.footerLink, borderLeftWidth: 1}}\n          />\n          <Button\n            onPress={(): void => updateSettings('resolution', resolution === 640 ? 1280 : 640)}\n            text={resolution === 640 ? '640p' : '1280p'}\n            addStyles={{...styles.footerLink, borderLeftWidth: 1}}\n          />\n          <Button\n            onPress={(): void => { updateSettings('theme', theme === 'dark' ? 'light' : 'dark') }}\n            text={theme === 'dark' ? 'dark' : 'light'}\n            addStyles={{...styles.footerLink, borderLeftWidth: 1}}\n          />\n        </View>\n      </View>\n    </ThemeContext.Provider>\n  )\n}\n\nexport default App\n","/* eslint-disable */\nimport React, {useEffect, useState} from 'react'\nimport App from './src/App'\nimport * as Font from 'expo-font'\nimport { Platform } from 'react-native'\n\nif (Platform.OS === 'web') {\n  window.oncontextmenu = (event) => {\n    event.preventDefault()\n    event.stopPropagation()\n    return false\n  }\n}\n\nconst AppContainer = () => {\n  const [isLoading, setIsLoading] = useState(true)\n\n  const loadAssetsAsync = async () => {\n    await Font.loadAsync({\n      'Ubuntu Mono': require('./assets/fonts/UbuntuMono-R.ttf'),\n    });\n\n    setIsLoading(false)\n  }\n\n  useEffect( () => {\n    loadAssetsAsync()\n  }, [])\n\n  return(\n    !isLoading && <App />\n  )\n}\n\nexport default AppContainer","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/react-native-media-viewer/expo-service-worker.js', { scope: '/react-native-media-viewer/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}